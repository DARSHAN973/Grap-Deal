generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  email             String             @unique
  password          String
  name              String
  role              Role               @default(USER)
  phone             String             @unique
  avatar            String?
  isActive          Boolean            @default(true)
  kycstatus         KYCStatus          @default(NONE)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  addresses         Address[]
  c2cListings       C2CListing[]
  c2cPurchases      C2COrder[]         @relation("C2CBuyer")
  cart              Cart?
  following         Follow[]           @relation("UserFollowing")
  followers         Follow[]           @relation("UserFollowers")
  orders            Order[]
  reviews           Review[]
  userKYC           UserKYC?
  profile           UserProfile?
  vendorApplication VendorApplication?
  vendorProfile     VendorProfile?
  wishlist          WishlistItem[]

  @@map("users")
}

model UserProfile {
  id                String    @id @default(cuid())
  userId            String    @unique
  dateOfBirth       DateTime?
  gender            Gender?
  bio               String?
  website           String?
  location          String?
  preferredLanguage String    @default("en")
  currency          String    @default("USD")
  notifications     Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model VendorProfile {
  id               String           @id @default(cuid())
  userId           String           @unique
  businessName     String
  businessType     BusinessType
  description      String?
  website          String?
  logo             String?
  banner           String?
  taxId            String?
  registrationNo   String?
  establishedYear  Int?
  businessEmail    String
  businessPhone    String
  isVerified       Boolean          @default(false)
  isActive         Boolean          @default(true)
  rating           Float            @default(0)
  totalRatings     Int              @default(0)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  orders           Order[]
  products         Product[]
  vendorCategories VendorCategory[]
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("vendor_profiles")
}

model VendorApplication {
  id                String            @id @default(cuid())
  userId            String            @unique
  businessName      String
  businessType      BusinessType
  description       String
  phoneNumber       String
  website           String?
  businessAddress   Json
  businessRegNumber String?
  taxId             String?
  gstNumber         String?
  kycStatus         KYCStatus         @default(PENDING)
  status            ApplicationStatus @default(PENDING)
  reason            String?
  adminNotes        String?
  appliedAt         DateTime          @default(now())
  reviewedAt        DateTime?
  reviewedBy        String?
  kycDocuments      KYCDocument[]
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("vendor_applications")
}

model KYCDocument {
  id                 String                     @id @default(cuid())
  applicationId      String
  documentType       DocumentType
  documentName       String
  documentUrl        String
  fileSize           Int
  mimeType           String
  verificationStatus DocumentVerificationStatus @default(PENDING)
  verificationNotes  String?
  uploadedAt         DateTime                   @default(now())
  verifiedAt         DateTime?
  verifiedBy         String?
  application        VendorApplication          @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@index([applicationId], map: "kyc_documents_applicationId_fkey")
  @@map("kyc_documents")
}

model UserKYC {
  id                String               @id @default(cuid())
  userId            String               @unique
  fullName          String
  dateOfBirth       DateTime
  nationality       String
  occupation        String?
  identityType      IdentityDocumentType
  identityNumber    String
  identityDocument  String
  addressDocument   String?
  permanentAddress  Json
  photoUrl          String?
  signatureUrl      String?
  status            KYCStatus            @default(PENDING)
  verificationNotes String?
  riskLevel         RiskLevel            @default(LOW)
  submittedAt       DateTime             @default(now())
  verifiedAt        DateTime?
  verifiedBy        String?
  expiresAt         DateTime?
  user              User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_kyc")
}

model Category {
  id               String           @id @default(cuid())
  name             String           @unique
  slug             String           @unique
  image            String?
  parentId         String?
  isActive         Boolean          @default(true)
  sortOrder        Int              @default(0)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  c2cListings      C2CListing[]
  parent           Category?        @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children         Category[]       @relation("CategoryHierarchy")
  products         Product[]
  vendorCategories VendorCategory[]

  @@index([slug])
  @@index([parentId])
  @@index([isActive, sortOrder])
  @@map("categories")
}

model Product {
  id            String           @id @default(cuid())
  name          String
  slug          String           @unique
  description   String?          @db.Text
  vendorId      String?
  categoryId    String
  sku           String           @unique
  brand         String           @default("Generic")
  price         Decimal          @db.Decimal(10, 2)
  originalPrice Decimal?         @db.Decimal(10, 2)
  discount      Float?
  productType   ProductType      @default(REGULAR)
  rating        Float            @default(0) @db.Float
  ratingCount   Int              @default(0)
  weight        Float
  dimensions    Json
  businessModel BusinessModel    @default(E_COMMERCE)
  status        ProductStatus    @default(ACTIVE)
  isActive      Boolean          @default(true)
  stock         Int              @default(0)
  viewCount     Int              @default(0)
  orderCount    Int              @default(0)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  cartItems     CartItem[]
  inventory     Inventory[]
  orderItems    OrderItem[]
  images        ProductImage[]
  tags          ProductTag[]
  variants      ProductVariant[]
  category      Category         @relation(fields: [categoryId], references: [id])
  vendor        VendorProfile?   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  reviews       Review[]
  wishlistItems WishlistItem[]

  @@index([slug])
  @@index([vendorId])
  @@index([categoryId])
  @@index([status, isActive])
  @@index([productType])
  @@index([price])
  @@index([rating])
  @@index([createdAt])
  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  altText   String?
  sortOrder Int      @default(0)
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId, sortOrder])
  @@map("product_images")
}

model ProductVariant {
  id           String      @id @default(cuid())
  productId    String
  name         String
  sku          String?     @unique
  price        Decimal?    @db.Decimal(10, 2)
  comparePrice Decimal?    @db.Decimal(10, 2)
  attributes   Json
  isActive     Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  cartItems    CartItem[]
  inventory    Inventory[]
  orderItems   OrderItem[]
  product      Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([sku])
  @@map("product_variants")
}

model Inventory {
  id            String          @id @default(cuid())
  productId     String
  variantId     String?
  quantity      Int
  reservedQty   Int             @default(0)
  minStockLevel Int?
  maxStockLevel Int?
  lastUpdated   DateTime        @default(now())
  updatedBy     String?
  product       Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant       ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([productId, variantId])
  @@index([quantity])
  @@index([minStockLevel])
  @@index([variantId], map: "inventory_variantId_fkey")
  @@map("inventory")
}

model Tag {
  id        String       @id @default(cuid())
  name      String       @unique
  slug      String       @unique
  color     String?      @default("#6366f1")
  createdAt DateTime     @default(now())
  products  ProductTag[]

  @@map("tags")
}

model ProductTag {
  id        String  @id @default(cuid())
  productId String
  tagId     String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([productId, tagId])
  @@index([tagId], map: "product_tags_tagId_fkey")
  @@map("product_tags")
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("carts")
}

model CartItem {
  id        String          @id @default(cuid())
  cartId    String
  productId String
  variantId String?
  quantity  Int
  price     Decimal         @db.Decimal(10, 2)
  addedAt   DateTime        @default(now())
  cart      Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId, variantId])
  @@index([productId], map: "cart_items_productId_fkey")
  @@index([variantId], map: "cart_items_variantId_fkey")
  @@map("cart_items")
}

model Order {
  id              String         @id @default(cuid())
  orderNumber     String         @unique
  userId          String
  vendorId        String?
  subtotal        Decimal        @db.Decimal(10, 2)
  shipping        Decimal        @default(0.00) @db.Decimal(10, 2)
  tax             Decimal        @default(0.00) @db.Decimal(10, 2)
  discount        Decimal        @default(0.00) @db.Decimal(10, 2)
  total           Decimal        @db.Decimal(10, 2)
  status          OrderStatus    @default(PENDING)
  paymentStatus   PaymentStatus  @default(PENDING)
  shippingAddress Json
  billingAddress  Json?
  trackingNumber  String?
  orderDate       DateTime       @default(now())
  shippedAt       DateTime?
  deliveredAt     DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  items           OrderItem[]
  user            User           @relation(fields: [userId], references: [id])
  vendor          VendorProfile? @relation(fields: [vendorId], references: [id])
  payments        Payment[]

  @@index([userId])
  @@index([vendorId])
  @@index([status])
  @@index([orderDate])
  @@map("orders")
}

model OrderItem {
  id        String          @id @default(cuid())
  orderId   String
  productId String
  variantId String?
  quantity  Int
  price     Decimal         @db.Decimal(10, 2)
  order     Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product         @relation(fields: [productId], references: [id])
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  @@index([orderId], map: "order_items_orderId_fkey")
  @@index([productId], map: "order_items_productId_fkey")
  @@index([variantId], map: "order_items_variantId_fkey")
  @@map("order_items")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  addedAt   DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([productId], map: "wishlist_items_productId_fkey")
  @@map("wishlist_items")
}

model Review {
  id         String   @id @default(cuid())
  userId     String
  productId  String
  rating     Int
  title      String?
  comment    String?
  images     Json?
  isVerified Boolean  @default(false)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([productId, rating])
  @@map("reviews")
}

model C2CListing {
  id           String        @id @default(cuid())
  sellerId     String
  title        String
  description  String
  price        Decimal       @db.Decimal(10, 2)
  condition    ItemCondition
  location     String
  categoryId   String
  images       Json?
  status       C2CStatus     @default(ACTIVE)
  isSold       Boolean       @default(false)
  isNegotiable Boolean       @default(true)
  viewCount    Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  category     Category      @relation(fields: [categoryId], references: [id])
  seller       User          @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  orders       C2COrder[]

  @@index([sellerId])
  @@index([categoryId])
  @@index([status, isSold])
  @@index([price])
  @@index([location])
  @@index([createdAt])
  @@map("c2c_listings")
}

model C2COrder {
  id           String         @id @default(cuid())
  listingId    String
  buyerId      String
  agreedPrice  Decimal        @db.Decimal(10, 2)
  status       C2COrderStatus @default(PENDING)
  buyerMessage String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  buyer        User           @relation("C2CBuyer", fields: [buyerId], references: [id])
  listing      C2CListing     @relation(fields: [listingId], references: [id])

  @@index([buyerId], map: "c2c_orders_buyerId_fkey")
  @@index([listingId], map: "c2c_orders_listingId_fkey")
  @@map("c2c_orders")
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String
  amount        Decimal       @db.Decimal(10, 2)
  currency      String        @default("USD")
  paymentMethod PaymentMethod
  status        PaymentStatus @default(PENDING)
  gatewayId     String?
  gatewayData   Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  order         Order         @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([status])
  @@map("payments")
}

model Address {
  id        String      @id @default(cuid())
  userId    String
  type      AddressType @default(HOME)
  firstName String
  lastName  String
  company   String?
  address1  String
  address2  String?
  city      String
  state     String
  country   String
  zipCode   String
  phone     String?
  isDefault Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("addresses")
}

model VendorCategory {
  id         String        @id @default(cuid())
  vendorId   String
  categoryId String
  category   Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  vendor     VendorProfile @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@unique([vendorId, categoryId])
  @@index([categoryId], map: "vendor_categories_categoryId_fkey")
  @@map("vendor_categories")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followingId], map: "follows_followingId_fkey")
  @@map("follows")
}

model Banner {
  id        Int      @id @default(autoincrement())
  title     String
  imageUrl  String
  sortOrder Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessage {
  id        Int      @id @default(autoincrement())
  fullName  String
  email     String
  subject   String
  category  String
  message   String
  createdAt DateTime @default(now())
}

enum ProductType {
  REGULAR
  TRENDING
  BESTSELLER
  HOT_DROP
  NEW_ARRIVAL
  FEATURED
}

enum Role {
  USER
  VENDOR
  ADMIN
  SUPER_ADMIN
}

enum KYCStatus {
  NONE
  PENDING
  VERIFIED
  REJECTED
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum BusinessType {
  INDIVIDUAL
  PARTNERSHIP
  CORPORATION
  LLC
  NONPROFIT
  OTHER
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}

enum ProductStatus {
  DRAFT
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  STRIPE
  BANK_TRANSFER
  CASH_ON_DELIVERY
  WALLET
}

enum BusinessModel {
  E_COMMERCE
  B2C
  B2B
  C2C
}

enum AddressType {
  HOME
  WORK
  BILLING
  SHIPPING
  OTHER
}

enum ItemCondition {
  NEW
  LIKE_NEW
  GOOD
  FAIR
  POOR
}

enum C2CStatus {
  ACTIVE
  INACTIVE
  SOLD
  EXPIRED
}

enum C2COrderStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
  CANCELLED
}

enum DocumentType {
  BUSINESS_REGISTRATION
  TAX_CERTIFICATE
  GST_CERTIFICATE
  TRADE_LICENSE
  BANK_STATEMENT
  IDENTITY_PROOF
  ADDRESS_PROOF
  PARTNERSHIP_DEED
  MOA_AOA
  FINANCIAL_STATEMENT
  OTHER
}

enum DocumentVerificationStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
  REQUIRES_RESUBMISSION
}

enum IdentityDocumentType {
  PASSPORT
  DRIVING_LICENSE
  NATIONAL_ID
  VOTER_ID
  AADHAAR_CARD
  PAN_CARD
  OTHER
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
